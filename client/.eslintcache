[{"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\index.js":"1","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\App.js":"2","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\pages\\SavedBooks.js":"3","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\components\\Navbar.js":"5","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\components\\LoginForm.js":"6","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\components\\SignupForm.js":"7","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\API.js":"8","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\localStorage.js":"9","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\auth.js":"10","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\mutations.js":"11"},{"size":266,"mtime":1653745893139,"results":"12","hashOfConfig":"13"},{"size":1025,"mtime":1653783095374,"results":"14","hashOfConfig":"13"},{"size":2946,"mtime":1653745893140,"results":"15","hashOfConfig":"13"},{"size":4838,"mtime":1653785040689,"results":"16","hashOfConfig":"13"},{"size":2524,"mtime":1653745893138,"results":"17","hashOfConfig":"13"},{"size":2617,"mtime":1653745893137,"results":"18","hashOfConfig":"13"},{"size":3301,"mtime":1653786238869,"results":"19","hashOfConfig":"13"},{"size":1392,"mtime":1653745893141,"results":"20","hashOfConfig":"13"},{"size":793,"mtime":1653745893142,"results":"21","hashOfConfig":"13"},{"size":1234,"mtime":1653745893142,"results":"22","hashOfConfig":"13"},{"size":1137,"mtime":1653780565072,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k9o4gw",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\index.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\App.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\pages\\SavedBooks.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\pages\\SearchBooks.js",["48"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { SAVE_BOOK } from '../utils/mutations';\n\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [ addBook ] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await addBook({\n        variables: {bookData: { ...bookToSave }}\n      });\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\components\\Navbar.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\components\\SignupForm.js",["49"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { ADD_USER } from '../utils/mutations';\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\API.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\auth.js",[],"C:\\Users\\prash\\OneDrive\\Desktop\\Rutgers\\Homework\\HW21\\book-search\\client\\src\\utils\\mutations.js",[],{"ruleId":"50","severity":1,"message":"51","line":5,"column":10,"nodeType":"52","messageId":"53","endLine":5,"endColumn":18},{"ruleId":"50","severity":1,"message":"54","line":16,"column":21,"nodeType":"52","messageId":"53","endLine":16,"endColumn":26},"no-unused-vars","'saveBook' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used."]